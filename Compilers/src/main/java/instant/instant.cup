// -*- Java -*- This Cup file was machine-generated by BNFC
package instant;

parser code {:
  public instant.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (instant.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal instant.Absyn.Program Program;
nonterminal instant.Absyn.Stmt Stmt;
nonterminal instant.Absyn.ListStmt ListStmt;
nonterminal instant.Absyn.Exp Exp1;
nonterminal instant.Absyn.Exp Exp2;
nonterminal instant.Absyn.Exp Exp3;
nonterminal instant.Absyn.Exp Exp4;
nonterminal instant.Absyn.Exp Exp;

terminal _SYMB_0;    //   =
terminal _SYMB_1;    //   ;
terminal _SYMB_2;    //   +
terminal _SYMB_3;    //   -
terminal _SYMB_4;    //   *
terminal _SYMB_5;    //   /
terminal _SYMB_6;    //   (
terminal _SYMB_7;    //   )



terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Program;


Program ::= ListStmt:p_1  {: RESULT = new instant.Absyn.Prog(p_1); :} 
;
Stmt ::= _IDENT_:p_1 _SYMB_0 Exp:p_3  {: RESULT = new instant.Absyn.SAss(p_1,p_3); :} 
  | Exp:p_1  {: RESULT = new instant.Absyn.SExp(p_1); :}
;
ListStmt ::=  /* empty */  {: RESULT = new instant.Absyn.ListStmt(); :} 
  | Stmt:p_1  {: RESULT = new instant.Absyn.ListStmt(); RESULT.addLast(p_1); :}
  | Stmt:p_1 _SYMB_1 ListStmt:p_3  {: RESULT = p_3; p_3.addFirst(p_1); :}
;
Exp1 ::= Exp2:p_1 _SYMB_2 Exp1:p_3  {: RESULT = new instant.Absyn.ExpAdd(p_1,p_3); :} 
  | Exp2:p_1  {: RESULT = p_1; :}
;
Exp2 ::= Exp2:p_1 _SYMB_3 Exp3:p_3  {: RESULT = new instant.Absyn.ExpSub(p_1,p_3); :} 
  | Exp3:p_1  {: RESULT = p_1; :}
;
Exp3 ::= Exp3:p_1 _SYMB_4 Exp4:p_3  {: RESULT = new instant.Absyn.ExpMul(p_1,p_3); :} 
  | Exp3:p_1 _SYMB_5 Exp4:p_3  {: RESULT = new instant.Absyn.ExpDiv(p_1,p_3); :}
  | Exp4:p_1  {: RESULT = p_1; :}
;
Exp4 ::= _INTEGER_:p_1  {: RESULT = new instant.Absyn.ExpLit(p_1); :} 
  | _IDENT_:p_1  {: RESULT = new instant.Absyn.ExpVar(p_1); :}
  | _SYMB_6 Exp:p_2 _SYMB_7  {: RESULT = p_2; :}
;
Exp ::= Exp1:p_1  {: RESULT = p_1; :} 
;

