
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package instant;

import java_cup.runtime.XMLElement;
// import java_cup.runtime.token;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\002\000\002\004\003" +
    "\000\002\004\005\000\002\005\005\000\002\005\003\000" +
    "\002\006\005\000\002\006\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\002\ufffd\012\006\014\012\015\011\001" +
    "\002\000\004\002\000\001\002\000\004\002\036\001\002" +
    "\000\010\012\006\014\012\015\021\001\002\000\006\002" +
    "\ufffe\005\ufffe\001\002\000\006\002\ufffc\005\032\001\002" +
    "\000\020\002\ufff2\004\030\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\001\002\000\020\002\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\013\ufff3\001\002\000\020\002" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4" +
    "\001\002\000\020\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\024\011\025\013\ufff7\001\002\000\014\002\ufff9\005\ufff9" +
    "\006\020\007\017\013\ufff9\001\002\000\010\002\ufff0\005" +
    "\ufff0\013\ufff0\001\002\000\010\012\006\014\012\015\021" +
    "\001\002\000\010\012\006\014\012\015\021\001\002\000" +
    "\020\002\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\013\ufff2\001\002\000\010\002\ufffa\005\ufffa\013\ufffa\001" +
    "\002\000\020\002\ufff8\005\ufff8\006\ufff8\007\ufff8\010\024" +
    "\011\025\013\ufff8\001\002\000\010\012\006\014\012\015" +
    "\021\001\002\000\010\012\006\014\012\015\021\001\002" +
    "\000\020\002\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\013\ufff5\001\002\000\020\002\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\013\ufff6\001\002\000\010\012" +
    "\006\014\012\015\021\001\002\000\006\002\uffff\005\uffff" +
    "\001\002\000\012\002\ufffd\012\006\014\012\015\011\001" +
    "\002\000\004\002\ufffb\001\002\000\004\013\035\001\002" +
    "\000\020\002\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\013\ufff1\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\022\002\004\003\007\004\003\005\015\006" +
    "\014\007\013\010\012\011\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\015\006\014\007\013\010" +
    "\012\011\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\022\010\012\001\001\000\012\005\021\006\014\007" +
    "\013\010\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\026\001\001\000\004\010" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\015\006\014\007\013\010\012\011\030\001\001\000" +
    "\002\001\001\000\020\003\007\004\032\005\015\006\014" +
    "\007\013\010\012\011\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public instant.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (instant.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		instant.Absyn.Program start_val = (instant.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListStmt 
            {
              instant.Absyn.Program RESULT =null;
		instant.Absyn.ListStmt p_1 = (instant.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.Prog(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Stmt ::= _IDENT_ _SYMB_0 Exp 
            {
              instant.Absyn.Stmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Exp p_3 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Stmt ::= Exp 
            {
              instant.Absyn.Stmt RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListStmt ::= 
            {
              instant.Absyn.ListStmt RESULT =null;
		 RESULT = new instant.Absyn.ListStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStmt ::= Stmt 
            {
              instant.Absyn.ListStmt RESULT =null;
		instant.Absyn.Stmt p_1 = (instant.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.ListStmt(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListStmt ::= Stmt _SYMB_1 ListStmt 
            {
              instant.Absyn.ListStmt RESULT =null;
		instant.Absyn.Stmt p_1 = (instant.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.ListStmt p_3 = (instant.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp1 ::= Exp2 _SYMB_2 Exp1 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Exp p_3 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.ExpAdd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp1 ::= Exp2 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp1",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp2 ::= Exp2 _SYMB_3 Exp3 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Exp p_3 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.ExpSub(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp2 ::= Exp3 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp2",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp3 ::= Exp3 _SYMB_4 Exp4 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Exp p_3 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.ExpMul(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp3 ::= Exp3 _SYMB_5 Exp4 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		instant.Absyn.Exp p_3 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.ExpDiv(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp3 ::= Exp4 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp3",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp4 ::= _INTEGER_ 
            {
              instant.Absyn.Exp RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.ExpLit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp4 ::= _IDENT_ 
            {
              instant.Absyn.Exp RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new instant.Absyn.ExpVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp4 ::= _SYMB_6 Exp _SYMB_7 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_2 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp4",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp ::= Exp1 
            {
              instant.Absyn.Exp RESULT =null;
		instant.Absyn.Exp p_1 = (instant.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",7, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
