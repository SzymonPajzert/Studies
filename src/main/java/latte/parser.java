
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package latte;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\011\000\002\003\007\000\002\004\005" +
    "\000\002\004\010\000\002\005\003\000\002\005\004\000" +
    "\002\006\003\000\002\006\004\000\002\007\004\000\002" +
    "\010\002\000\002\010\003\000\002\010\005\000\002\011" +
    "\005\000\002\012\002\000\002\012\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\005\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\004\000\002\013" +
    "\007\000\002\013\011\000\002\013\007\000\002\013\012" +
    "\000\002\013\012\000\002\013\004\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\004\000\002\017\002" +
    "\000\002\017\003\000\002\017\005\000\002\020\006\000" +
    "\002\021\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\006\000\002\022\005" +
    "\000\002\023\010\000\002\023\003\000\002\023\007\000" +
    "\002\023\003\000\002\024\004\000\002\024\006\000\002" +
    "\024\004\000\002\024\004\000\002\024\003\000\002\025" +
    "\005\000\002\025\003\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\003\000\002\030\005\000" +
    "\002\030\003\000\002\031\005\000\002\031\003\000\002" +
    "\032\002\000\002\032\003\000\002\032\005\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\016\040\010\041\005\047\015\053\013\055" +
    "\014\061\012\001\002\000\006\016\031\061\254\001\002" +
    "\000\004\061\020\001\002\000\004\002\017\001\002\000" +
    "\004\002\000\001\002\000\052\005\uffd9\010\uffd9\011\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\022\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\061\uffd9\001\002\000\020\002" +
    "\ufff8\040\010\041\005\047\015\053\013\055\014\061\012" +
    "\001\002\000\052\005\uffd7\010\uffd7\011\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\061\uffd7\001\002\000\052\005\uffda\010\uffda" +
    "\011\uffda\016\uffda\017\uffda\020\uffda\022\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\061\uffda\001\002\000" +
    "\052\005\uffd8\010\uffd8\011\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\061\uffd8\001\002\000\052\005\uffdb\010\uffdb\011\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\061\uffdb\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\001\001\002\000\006\006\021\043" +
    "\022\001\002\000\014\040\010\047\015\053\013\055\014" +
    "\061\012\001\002\000\004\061\023\001\002\000\004\006" +
    "\024\001\002\000\014\040\010\047\015\053\013\055\014" +
    "\061\012\001\002\000\016\007\ufffa\040\010\047\015\053" +
    "\013\055\014\061\012\001\002\000\006\016\031\061\032" +
    "\001\002\000\004\007\030\001\002\000\020\002\ufffe\040" +
    "\ufffe\041\ufffe\047\ufffe\053\ufffe\055\ufffe\061\ufffe\001\002" +
    "\000\052\005\uffd6\010\uffd6\011\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\061\uffd6\001\002\000\006\004\034\010\033\001\002" +
    "\000\016\007\ufffc\040\ufffc\047\ufffc\053\ufffc\055\ufffc\061" +
    "\ufffc\001\002\000\016\005\ufff5\040\010\047\015\053\013" +
    "\055\014\061\012\001\002\000\006\016\031\061\250\001" +
    "\002\000\006\005\ufff4\011\246\001\002\000\004\005\040" +
    "\001\002\000\004\006\041\001\002\000\054\004\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\022\ufff1\023\ufff1\040\ufff1\044\ufff1" +
    "\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\001\002\000\016\007\ufffb\040\ufffb\047\ufffb\053\ufffb\055" +
    "\ufffb\061\ufffb\001\002\000\054\004\074\006\041\007\073" +
    "\010\072\022\066\023\064\040\010\044\057\045\052\046" +
    "\051\047\015\050\045\051\077\052\076\053\013\054\071" +
    "\055\014\056\070\057\047\060\044\061\056\001\002\000" +
    "\050\005\uffcc\010\uffcc\011\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\001\002\000\014\040\010\047\015\053\013\055\014\061" +
    "\012\001\002\000\050\005\uffc4\010\uffc4\011\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\001\002\000\050\005\uffc6\010\uffc6\011" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\001\002\000\050\005\uffbf" +
    "\010\uffbf\011\uffbf\017\134\020\uffbf\021\133\022\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\001\002\000" +
    "\004\004\237\001\002\000\004\004\222\001\002\000\044" +
    "\010\uffcd\012\217\017\uffcd\021\uffcd\022\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\001\002\000\044\005" +
    "\uffbd\010\uffbd\011\uffbd\020\uffbd\022\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\001\002\000\044\005\uffbb" +
    "\010\uffbb\011\uffbb\020\uffbb\022\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\205\030\204\031\203\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\001\002\000\056\004\107\010" +
    "\uffd0\012\212\013\211\014\210\016\uffd7\017\uffd0\021\uffd0" +
    "\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\061\uffd7\001\002\000\050\005\uffca\010\uffca\011\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\001\002\000\036\005\uffb9\010\uffb9" +
    "\011\uffb9\020\uffb9\022\200\024\uffb9\025\uffb9\026\177\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\001\002" +
    "\000\032\005\uffb7\010\uffb7\011\uffb7\020\uffb7\024\167\025" +
    "\uffb7\032\165\033\174\034\173\035\172\036\171\037\170" +
    "\001\002\000\054\004\ufff0\006\ufff0\007\ufff0\010\ufff0\022" +
    "\ufff0\023\ufff0\040\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\001\002\000\014\005\uffb5" +
    "\010\uffb5\011\uffb5\020\uffb5\025\163\001\002\000\026\004" +
    "\074\022\066\023\064\044\057\050\045\051\077\054\071" +
    "\057\047\060\044\061\103\001\002\000\004\010\161\001" +
    "\002\000\026\004\074\022\066\023\064\044\057\050\045" +
    "\051\077\054\071\057\047\060\044\061\103\001\002\000" +
    "\006\016\031\061\151\001\002\000\004\004\144\001\002" +
    "\000\050\005\uffcb\010\uffcb\011\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037" +
    "\uffcb\001\002\000\060\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\022\uffef\023\uffef\040\uffef\042\uffef\044\uffef\045" +
    "\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\001" +
    "\002\000\064\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\022\ufff2\023\ufff2\040\ufff2\041\ufff2\042\ufff2\044" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\001\002\000\036\004\074\022\066\023\064\040\010" +
    "\044\057\047\015\050\045\051\077\053\013\054\071\055" +
    "\014\057\047\060\044\061\120\001\002\000\060\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\022\uffee\023\uffee\040" +
    "\uffee\042\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\001\002\000\030\004\074\010\116" +
    "\022\066\023\064\044\057\050\045\051\077\054\071\057" +
    "\047\060\044\061\103\001\002\000\050\005\uffcf\010\uffcf" +
    "\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\001\002\000\044\010" +
    "\uffce\012\101\017\uffce\021\uffce\022\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\001\002\000\026\004\074" +
    "\022\066\023\064\044\057\050\045\051\077\054\071\057" +
    "\047\060\044\061\103\001\002\000\050\005\uffcd\010\uffcd" +
    "\011\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\001\002\000\052\004" +
    "\107\005\uffd0\010\uffd0\011\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\001\002\000\004\010\106\001\002\000\050\005\uffce\010" +
    "\uffce\011\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\001\002\000\060" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\022\uffeb\023" +
    "\uffeb\040\uffeb\042\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\001\002\000\030\004\074" +
    "\005\uffb4\022\066\023\064\044\057\050\045\051\077\054" +
    "\071\057\047\060\044\061\103\001\002\000\006\005\uffb3" +
    "\011\113\001\002\000\004\005\112\001\002\000\050\005" +
    "\uffc9\010\uffc9\011\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\001\002" +
    "\000\030\004\074\005\uffb4\022\066\023\064\044\057\050" +
    "\045\051\077\054\071\057\047\060\044\061\103\001\002" +
    "\000\004\005\uffb2\001\002\000\004\010\117\001\002\000" +
    "\060\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\022\uffe6" +
    "\023\uffe6\040\uffe6\042\uffe6\044\uffe6\045\uffe6\046\uffe6\047" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\001\002\000\060\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\022\uffe7\023\uffe7" +
    "\040\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\001\002\000\046\004\107\005" +
    "\uffd7\016\uffd7\017\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\001\002\000\004\005\143" +
    "\001\002\000\006\005\123\016\031\001\002\000\022\004" +
    "\125\044\057\050\126\051\077\054\071\057\047\060\044" +
    "\061\103\001\002\000\050\005\uffc2\010\uffc2\011\uffc2\017" +
    "\134\020\uffc2\021\133\022\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\037\uffc2\001\002\000\026\004\074\022\066" +
    "\023\064\044\057\050\045\051\077\054\071\057\047\060" +
    "\044\061\103\001\002\000\014\040\010\047\015\053\013" +
    "\055\014\061\012\001\002\000\006\016\031\017\130\001" +
    "\002\000\026\004\074\022\066\023\064\044\057\050\045" +
    "\051\077\054\071\057\047\060\044\061\103\001\002\000" +
    "\004\020\132\001\002\000\050\005\uffc5\010\uffc5\011\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\001\002\000\004\061\137\001" +
    "\002\000\026\004\074\022\066\023\064\044\057\050\045" +
    "\051\077\054\071\057\047\060\044\061\103\001\002\000" +
    "\004\020\136\001\002\000\052\005\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\001\002\000\054\004" +
    "\140\005\uffd1\010\uffd1\011\uffd1\012\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\001\002\000\030\004\074\005\uffb4\022\066\023" +
    "\064\044\057\050\045\051\077\054\071\057\047\060\044" +
    "\061\103\001\002\000\004\005\142\001\002\000\050\005" +
    "\uffc7\010\uffc7\011\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\001\002" +
    "\000\050\005\uffc8\010\uffc8\011\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\001\002\000\026\004\074\022\066\023\064\044\057" +
    "\050\045\051\077\054\071\057\047\060\044\061\103\001" +
    "\002\000\004\005\146\001\002\000\052\004\074\006\041" +
    "\010\072\022\066\023\064\040\010\044\057\045\052\046" +
    "\051\047\015\050\045\051\077\052\076\053\013\054\071" +
    "\055\014\056\070\057\047\060\044\061\056\001\002\000" +
    "\060\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\022\uffe3" +
    "\023\uffe3\040\uffe3\042\uffe3\044\uffe3\045\uffe3\046\uffe3\047" +
    "\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\061\uffe3\001\002\000\006\010" +
    "\uffdd\011\156\001\002\000\010\010\uffdf\011\uffdf\012\154" +
    "\001\002\000\004\010\153\001\002\000\060\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\022\uffed\023\uffed\040\uffed" +
    "\042\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051" +
    "\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\061\uffed\001\002\000\026\004\074\022\066\023" +
    "\064\044\057\050\045\051\077\054\071\057\047\060\044" +
    "\061\103\001\002\000\006\010\uffde\011\uffde\001\002\000" +
    "\004\061\151\001\002\000\004\010\uffdc\001\002\000\044" +
    "\005\uffc1\010\uffc1\011\uffc1\020\uffc1\022\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002\000\060\004" +
    "\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\022\uffe0\023\uffe0" +
    "\040\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\001\002\000\044\005\uffc0\010" +
    "\uffc0\011\uffc0\020\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\001\002\000\026\004\074\022\066" +
    "\023\064\044\057\050\045\051\077\054\071\057\047\060" +
    "\044\061\103\001\002\000\012\005\uffb6\010\uffb6\011\uffb6" +
    "\020\uffb6\001\002\000\026\004\uffac\022\uffac\023\uffac\044" +
    "\uffac\050\uffac\051\uffac\054\uffac\057\uffac\060\uffac\061\uffac" +
    "\001\002\000\026\004\074\022\066\023\064\044\057\050" +
    "\045\051\077\054\071\057\047\060\044\061\103\001\002" +
    "\000\026\004\074\022\066\023\064\044\057\050\045\051" +
    "\077\054\071\057\047\060\044\061\103\001\002\000\026" +
    "\004\uffa7\022\uffa7\023\uffa7\044\uffa7\050\uffa7\051\uffa7\054" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\001\002\000\026\004\uffa8" +
    "\022\uffa8\023\uffa8\044\uffa8\050\uffa8\051\uffa8\054\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\001\002\000\026\004\uffa9\022\uffa9" +
    "\023\uffa9\044\uffa9\050\uffa9\051\uffa9\054\uffa9\057\uffa9\060" +
    "\uffa9\061\uffa9\001\002\000\026\004\uffaa\022\uffaa\023\uffaa" +
    "\044\uffaa\050\uffaa\051\uffaa\054\uffaa\057\uffaa\060\uffaa\061" +
    "\uffaa\001\002\000\026\004\uffab\022\uffab\023\uffab\044\uffab" +
    "\050\uffab\051\uffab\054\uffab\057\uffab\060\uffab\061\uffab\001" +
    "\002\000\014\005\uffb8\010\uffb8\011\uffb8\020\uffb8\025\uffb8" +
    "\001\002\000\036\005\uffba\010\uffba\011\uffba\020\uffba\022" +
    "\200\024\uffba\025\uffba\026\177\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\001\002\000\026\004\uffb1\022" +
    "\uffb1\023\uffb1\044\uffb1\050\uffb1\051\uffb1\054\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\001\002\000\026\004\uffb0\022\uffb0\023" +
    "\uffb0\044\uffb0\050\uffb0\051\uffb0\054\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\001\002\000\026\004\074\022\066\023\064\044" +
    "\057\050\045\051\077\054\071\057\047\060\044\061\103" +
    "\001\002\000\044\005\uffbc\010\uffbc\011\uffbc\020\uffbc\022" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\205\030\204\031\203" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\001" +
    "\002\000\026\004\uffad\022\uffad\023\uffad\044\uffad\050\uffad" +
    "\051\uffad\054\uffad\057\uffad\060\uffad\061\uffad\001\002\000" +
    "\026\004\uffae\022\uffae\023\uffae\044\uffae\050\uffae\051\uffae" +
    "\054\uffae\057\uffae\060\uffae\061\uffae\001\002\000\026\004" +
    "\uffaf\022\uffaf\023\uffaf\044\uffaf\050\uffaf\051\uffaf\054\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\001\002\000\026\004\074\022" +
    "\066\023\064\044\057\050\045\051\077\054\071\057\047" +
    "\060\044\061\103\001\002\000\044\005\uffbe\010\uffbe\011" +
    "\uffbe\020\uffbe\022\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\001\002\000\004\010\216\001\002\000\004" +
    "\010\215\001\002\000\026\004\074\022\066\023\064\044" +
    "\057\050\045\051\077\054\071\057\047\060\044\061\103" +
    "\001\002\000\004\010\214\001\002\000\060\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\010\uffec\022\uffec\023\uffec\040\uffec" +
    "\042\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\060\uffec\061\uffec\001\002\000\060\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\022\uffe9\023\uffe9\040\uffe9\042\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\001\002\000\060\004\uffe8\005\uffe8\006\uffe8\007" +
    "\uffe8\010\uffe8\022\uffe8\023\uffe8\040\uffe8\042\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053" +
    "\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\001\002\000\026\004\074\022\066\023\064\044\057\050" +
    "\045\051\077\054\071\057\047\060\044\061\103\001\002" +
    "\000\004\010\221\001\002\000\060\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\010\uffea\022\uffea\023\uffea\040\uffea\042\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\001\002\000\052\004\074\006\041\010\072\022" +
    "\066\023\064\040\010\044\057\045\052\046\051\047\015" +
    "\050\045\051\077\052\076\053\013\054\071\055\014\056" +
    "\070\057\047\060\044\061\056\001\002\000\026\004\074" +
    "\022\066\023\064\044\057\050\045\051\077\054\071\057" +
    "\047\060\044\061\103\001\002\000\006\016\031\061\225" +
    "\001\002\000\012\010\uffdf\011\uffdf\012\154\015\226\001" +
    "\002\000\026\004\074\022\066\023\064\044\057\050\045" +
    "\051\077\054\071\057\047\060\044\061\103\001\002\000" +
    "\004\005\230\001\002\000\052\004\074\006\041\010\072" +
    "\022\066\023\064\040\010\044\057\045\052\046\051\047" +
    "\015\050\045\051\077\052\076\053\013\054\071\055\014" +
    "\056\070\057\047\060\044\061\056\001\002\000\060\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\022\uffe1\023\uffe1" +
    "\040\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\001\002\000\004\010\233\001" +
    "\002\000\052\004\074\006\041\010\072\022\066\023\064" +
    "\040\010\044\057\045\052\046\051\047\015\050\045\051" +
    "\077\052\076\053\013\054\071\055\014\056\070\057\047" +
    "\060\044\061\056\001\002\000\004\005\235\001\002\000" +
    "\052\004\074\006\041\010\072\022\066\023\064\040\010" +
    "\044\057\045\052\046\051\047\015\050\045\051\077\052" +
    "\076\053\013\054\071\055\014\056\070\057\047\060\044" +
    "\061\056\001\002\000\060\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\022\uffe2\023\uffe2\040\uffe2\042\uffe2\044\uffe2" +
    "\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2" +
    "\001\002\000\026\004\074\022\066\023\064\044\057\050" +
    "\045\051\077\054\071\057\047\060\044\061\103\001\002" +
    "\000\004\005\241\001\002\000\052\004\074\006\041\010" +
    "\072\022\066\023\064\040\010\044\057\045\052\046\051" +
    "\047\015\050\045\051\077\052\076\053\013\054\071\055" +
    "\014\056\070\057\047\060\044\061\056\001\002\000\060" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\022\uffe5\023" +
    "\uffe5\040\uffe5\042\243\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\001\002\000\052\004\074" +
    "\006\041\010\072\022\066\023\064\040\010\044\057\045" +
    "\052\046\051\047\015\050\045\051\077\052\076\053\013" +
    "\054\071\055\014\056\070\057\047\060\044\061\056\001" +
    "\002\000\060\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\022\uffe4\023\uffe4\040\uffe4\042\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\001\002\000" +
    "\050\005\uffc3\010\uffc3\011\uffc3\016\031\017\130\020\uffc3" +
    "\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\001\002\000\016\005\ufff5\040\010\047\015\053\013\055" +
    "\014\061\012\001\002\000\004\005\ufff3\001\002\000\006" +
    "\005\ufff6\011\ufff6\001\002\000\004\007\ufff9\001\002\000" +
    "\004\007\253\001\002\000\020\002\ufffd\040\ufffd\041\ufffd" +
    "\047\ufffd\053\ufffd\055\ufffd\061\ufffd\001\002\000\004\004" +
    "\255\001\002\000\016\005\ufff5\040\010\047\015\053\013" +
    "\055\014\061\012\001\002\000\004\005\257\001\002\000" +
    "\004\006\041\001\002\000\020\002\uffff\040\uffff\041\uffff" +
    "\047\uffff\053\uffff\055\uffff\061\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\012\002\005\003\010\006\006\016\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\010\006" +
    "\015\016\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\024\005\251" +
    "\016\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\024\005\026\016\025\001\001\000\010\004\024" +
    "\005\250\016\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\010\036\016\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\041\001\001\000\004\012\042\001\001\000" +
    "\002\001\001\000\034\011\074\013\061\016\066\020\077" +
    "\021\052\022\045\023\047\024\053\025\054\026\057\027" +
    "\060\030\062\031\064\001\001\000\002\001\001\000\004" +
    "\016\244\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\200\001\001" +
    "\000\004\035\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\104\021\101\022\045\023\047\024\161" +
    "\001\001\000\002\001\001\000\014\020\104\021\101\022" +
    "\045\023\047\024\157\001\001\000\006\014\147\015\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\016\121\020\104\021\101" +
    "\022\045\023\047\024\053\025\054\026\057\027\060\030" +
    "\062\031\120\001\001\000\002\001\001\000\026\020\104" +
    "\021\101\022\045\023\047\024\053\025\054\026\057\027" +
    "\060\030\062\031\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\020\104\021\101\022\045\023\047\024" +
    "\053\025\054\026\057\027\060\030\062\031\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\020\104\021\101" +
    "\022\045\023\047\024\053\025\054\026\057\027\060\030" +
    "\062\031\107\032\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\020\104\021\101\022" +
    "\045\023\047\024\053\025\054\026\057\027\060\030\062" +
    "\031\107\032\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\104\021" +
    "\101\022\045\023\123\001\001\000\002\001\001\000\026" +
    "\020\104\021\101\022\045\023\047\024\053\025\054\026" +
    "\057\027\060\030\062\031\120\001\001\000\004\016\126" +
    "\001\001\000\002\001\001\000\026\020\104\021\101\022" +
    "\045\023\047\024\053\025\054\026\057\027\060\030\062" +
    "\031\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\020\104\021\101\022\045\023\047" +
    "\024\053\025\054\026\057\027\060\030\062\031\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\020\104\021\101\022\045\023\047\024\053\025" +
    "\054\026\057\027\060\030\062\031\107\032\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\104\021\101\022\045\023\047\024\053\025\054" +
    "\026\057\027\060\030\062\031\144\001\001\000\002\001" +
    "\001\000\034\011\074\013\146\016\066\020\077\021\052" +
    "\022\045\023\047\024\053\025\054\026\057\027\060\030" +
    "\062\031\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\104\021\101\022\045\023\047\024\053\025\054" +
    "\026\057\027\060\030\062\031\154\001\001\000\002\001" +
    "\001\000\006\014\147\015\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\020\104\021\101\022\045\023\047\024\053\025\054" +
    "\026\057\027\060\030\062\031\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\104\021\101\022\045" +
    "\023\047\024\053\025\054\026\175\001\001\000\024\020" +
    "\104\021\101\022\045\023\047\024\053\025\054\026\057" +
    "\027\060\030\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\104\021\101\022\045" +
    "\023\047\024\053\025\201\001\001\000\004\034\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\104\021\101\022\045\023\047\024\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\020\104\021\101\022\045\023\047\024\053\025" +
    "\054\026\057\027\060\030\062\031\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\020\104\021\101\022\045\023\047\024\053" +
    "\025\054\026\057\027\060\030\062\031\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\011\074\013\222" +
    "\016\223\020\077\021\052\022\045\023\047\024\053\025" +
    "\054\026\057\027\060\030\062\031\064\001\001\000\026" +
    "\020\104\021\101\022\045\023\047\024\053\025\054\026" +
    "\057\027\060\030\062\031\231\001\001\000\006\014\147" +
    "\015\151\001\001\000\002\001\001\000\026\020\104\021" +
    "\101\022\045\023\047\024\053\025\054\026\057\027\060" +
    "\030\062\031\226\001\001\000\002\001\001\000\034\011" +
    "\074\013\230\016\066\020\077\021\052\022\045\023\047" +
    "\024\053\025\054\026\057\027\060\030\062\031\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\011\074" +
    "\013\233\016\066\020\077\021\052\022\045\023\047\024" +
    "\053\025\054\026\057\027\060\030\062\031\064\001\001" +
    "\000\002\001\001\000\034\011\074\013\235\016\066\020" +
    "\077\021\052\022\045\023\047\024\053\025\054\026\057" +
    "\027\060\030\062\031\064\001\001\000\002\001\001\000" +
    "\026\020\104\021\101\022\045\023\047\024\053\025\054" +
    "\026\057\027\060\030\062\031\237\001\001\000\002\001" +
    "\001\000\034\011\074\013\241\016\066\020\077\021\052" +
    "\022\045\023\047\024\053\025\054\026\057\027\060\030" +
    "\062\031\064\001\001\000\002\001\001\000\034\011\074" +
    "\013\243\016\066\020\077\021\052\022\045\023\047\024" +
    "\053\025\054\026\057\027\060\030\062\031\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\035\010" +
    "\246\016\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\035\010\255\016\034\001\001" +
    "\000\002\001\001\000\004\011\257\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public latte.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (latte.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		latte.Absyn.Program start_val = (latte.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListTopDef 
            {
              latte.Absyn.Program RESULT =null;
		latte.Absyn.ListTopDef p_1 = (latte.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ProgramCons(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TopDef ::= Type _IDENT_ _SYMB_0 ListArg _SYMB_1 Block 
            {
              latte.Absyn.TopDef RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.ListArg p_4 = (latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Block p_6 = (latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.FnDef(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TopDef ::= _SYMB_29 _IDENT_ _SYMB_31 _IDENT_ _SYMB_2 ListClassElt _SYMB_3 
            {
              latte.Absyn.TopDef RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.ListClassElt p_6 = (latte.Absyn.ListClassElt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.ClInh(p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TopDef ::= _SYMB_29 _IDENT_ _SYMB_2 ListClassElt _SYMB_3 
            {
              latte.Absyn.TopDef RESULT =null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.ListClassElt p_4 = (latte.Absyn.ListClassElt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.ClDef(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassElt ::= Type _IDENT_ _SYMB_4 
            {
              latte.Absyn.ClassElt RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.Field(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassElt",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassElt ::= Type _IDENT_ _SYMB_0 ListArg _SYMB_1 Block 
            {
              latte.Absyn.ClassElt RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.ListArg p_4 = (latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Block p_6 = (latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Method(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassElt",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListClassElt ::= ClassElt 
            {
              latte.Absyn.ListClassElt RESULT =null;
		latte.Absyn.ClassElt p_1 = (latte.Absyn.ClassElt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListClassElt(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassElt",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListClassElt ::= ClassElt ListClassElt 
            {
              latte.Absyn.ListClassElt RESULT =null;
		latte.Absyn.ClassElt p_1 = (latte.Absyn.ClassElt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.ListClassElt p_2 = (latte.Absyn.ListClassElt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListClassElt",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListTopDef ::= TopDef 
            {
              latte.Absyn.ListTopDef RESULT =null;
		latte.Absyn.TopDef p_1 = (latte.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListTopDef(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTopDef",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListTopDef ::= TopDef ListTopDef 
            {
              latte.Absyn.ListTopDef RESULT =null;
		latte.Absyn.TopDef p_1 = (latte.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.ListTopDef p_2 = (latte.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTopDef",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Arg ::= Type _IDENT_ 
            {
              latte.Absyn.Arg RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ArgCons(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ListArg ::= 
            {
              latte.Absyn.ListArg RESULT =null;
		 RESULT = new latte.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ListArg ::= Arg 
            {
              latte.Absyn.ListArg RESULT =null;
		latte.Absyn.Arg p_1 = (latte.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ListArg ::= Arg _SYMB_5 ListArg 
            {
              latte.Absyn.ListArg RESULT =null;
		latte.Absyn.Arg p_1 = (latte.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListArg p_3 = (latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Block ::= _SYMB_2 ListStmt _SYMB_3 
            {
              latte.Absyn.Block RESULT =null;
		latte.Absyn.ListStmt p_2 = (latte.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.BlockCons(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ListStmt ::= 
            {
              latte.Absyn.ListStmt RESULT =null;
		 RESULT = new latte.Absyn.ListStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListStmt ::= ListStmt Stmt 
            {
              latte.Absyn.ListStmt RESULT =null;
		latte.Absyn.ListStmt p_1 = (latte.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.Stmt p_2 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		 RESULT = new latte.Absyn.Empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= Block 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Block p_1 = (latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.BStmt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= Type ListItem _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListItem p_2 = (latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.Decl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= _IDENT_ _SYMB_6 Expr _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.Ass(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= ArrayE _SYMB_6 Expr _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.ArrayE p_1 = (latte.Absyn.ArrayE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.AssArr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= FieldE _SYMB_6 Expr _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.FieldE p_1 = (latte.Absyn.FieldE)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.AssFie(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= _IDENT_ _SYMB_7 _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new latte.Absyn.Incr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= _IDENT_ _SYMB_8 _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new latte.Absyn.Decr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stmt ::= _SYMB_38 Expr _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_2 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.Ret(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stmt ::= _SYMB_38 _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		 RESULT = new latte.Absyn.VRet(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmt ::= _SYMB_34 _SYMB_0 Expr _SYMB_1 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_5 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Cond(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stmt ::= _SYMB_34 _SYMB_0 Expr _SYMB_1 Stmt _SYMB_30 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.Stmt p_5 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_7 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.CondElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stmt ::= _SYMB_42 _SYMB_0 Expr _SYMB_1 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_5 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.While(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stmt ::= _SYMB_33 _SYMB_0 Stmt Expr _SYMB_4 Stmt _SYMB_1 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Stmt p_3 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		latte.Absyn.Expr p_4 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.Stmt p_6 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_8 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.For(p_3,p_4,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stmt ::= _SYMB_33 _SYMB_0 Type _IDENT_ _SYMB_9 Expr _SYMB_1 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Type p_3 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.Expr p_6 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_8 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ForAbb(p_3,p_4,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stmt ::= Expr _SYMB_4 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Item ::= _IDENT_ 
            {
              latte.Absyn.Item RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.NoInit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Item",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Item ::= _IDENT_ _SYMB_6 Expr 
            {
              latte.Absyn.Item RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Init(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Item",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListItem ::= Item 
            {
              latte.Absyn.ListItem RESULT =null;
		latte.Absyn.Item p_1 = (latte.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListItem",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListItem ::= Item _SYMB_5 ListItem 
            {
              latte.Absyn.ListItem RESULT =null;
		latte.Absyn.Item p_1 = (latte.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListItem p_3 = (latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListItem",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Type ::= _SYMB_35 
            {
              latte.Absyn.Type RESULT =null;
		 RESULT = new latte.Absyn.Int(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Type ::= _SYMB_39 
            {
              latte.Absyn.Type RESULT =null;
		 RESULT = new latte.Absyn.Str(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Type ::= _SYMB_28 
            {
              latte.Absyn.Type RESULT =null;
		 RESULT = new latte.Absyn.Bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= _SYMB_41 
            {
              latte.Absyn.Type RESULT =null;
		 RESULT = new latte.Absyn.Void(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type ::= _IDENT_ 
            {
              latte.Absyn.Type RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Class(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Type ::= Type _SYMB_10 
            {
              latte.Absyn.Type RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.ArrayT(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListType ::= 
            {
              latte.Absyn.ListType RESULT =null;
		 RESULT = new latte.Absyn.ListType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListType ::= Type 
            {
              latte.Absyn.ListType RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ListType ::= Type _SYMB_5 ListType 
            {
              latte.Absyn.ListType RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListType p_3 = (latte.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ArrayE ::= Expr6 _SYMB_11 Expr _SYMB_12 
            {
              latte.Absyn.ArrayE RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.ArrAccess(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayE",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldE ::= Expr6 _SYMB_13 _IDENT_ 
            {
              latte.Absyn.FieldE RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.FldAccess(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldE",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr7 ::= _IDENT_ 
            {
              latte.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.IVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr7 ::= _SYMB_37 
            {
              latte.Absyn.Expr RESULT =null;
		 RESULT = new latte.Absyn.ENull(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr7 ::= ArrayE 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.ArrayE p_1 = (latte.Absyn.ArrayE)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.AVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr7 ::= FieldE 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.FieldE p_1 = (latte.Absyn.FieldE)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.FVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr7 ::= _INTEGER_ 
            {
              latte.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ELitInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr7 ::= _SYMB_40 
            {
              latte.Absyn.Expr RESULT =null;
		 RESULT = new latte.Absyn.ELitTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr7 ::= _SYMB_32 
            {
              latte.Absyn.Expr RESULT =null;
		 RESULT = new latte.Absyn.ELitFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr7 ::= _IDENT_ _SYMB_0 ListExpr _SYMB_1 
            {
              latte.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.ListExpr p_3 = (latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.EApp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr7 ::= _SYMB_0 Expr _SYMB_1 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_2 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr7",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr6 ::= Expr6 _SYMB_13 _IDENT_ _SYMB_0 ListExpr _SYMB_1 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.ListExpr p_5 = (latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.EMethod(p_1,p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr6 ::= _STRING_ 
            {
              latte.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr6 ::= _SYMB_36 Type _SYMB_11 Expr _SYMB_12 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Type p_2 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.Expr p_4 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.EArrayCons(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr6 ::= Expr7 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr5 ::= _SYMB_36 Type 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Type p_2 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EClassCons(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr5 ::= _SYMB_0 Type _SYMB_1 Expr6 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Type p_2 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Expr p_4 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ECast(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr5 ::= _SYMB_14 Expr5 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_2 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Neg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr5 ::= _SYMB_15 Expr5 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_2 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr5 ::= Expr6 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr4 ::= Expr4 MulOp Expr5 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.MulOp p_2 = (latte.Absyn.MulOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EMul(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr4 ::= Expr5 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr3 ::= Expr3 AddOp Expr4 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.AddOp p_2 = (latte.Absyn.AddOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EAdd(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr3 ::= Expr4 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr2 ::= Expr2 RelOp Expr3 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.RelOp p_2 = (latte.Absyn.RelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ERel(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr2 ::= Expr3 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr1 ::= Expr2 _SYMB_16 Expr1 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr1 ::= Expr2 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr1 _SYMB_17 Expr 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr1 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ListExpr ::= 
            {
              latte.Absyn.ListExpr RESULT =null;
		 RESULT = new latte.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListExpr ::= Expr 
            {
              latte.Absyn.ListExpr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListExpr ::= Expr _SYMB_5 ListExpr 
            {
              latte.Absyn.ListExpr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListExpr p_3 = (latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",24, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // AddOp ::= _SYMB_18 
            {
              latte.Absyn.AddOp RESULT =null;
		 RESULT = new latte.Absyn.Plus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOp",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // AddOp ::= _SYMB_14 
            {
              latte.Absyn.AddOp RESULT =null;
		 RESULT = new latte.Absyn.Minus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOp",25, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MulOp ::= _SYMB_19 
            {
              latte.Absyn.MulOp RESULT =null;
		 RESULT = new latte.Absyn.Times(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MulOp ::= _SYMB_20 
            {
              latte.Absyn.MulOp RESULT =null;
		 RESULT = new latte.Absyn.Div(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MulOp ::= _SYMB_21 
            {
              latte.Absyn.MulOp RESULT =null;
		 RESULT = new latte.Absyn.Mod(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",26, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RelOp ::= _SYMB_22 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.LTH(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RelOp ::= _SYMB_23 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.LE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RelOp ::= _SYMB_24 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.GTH(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RelOp ::= _SYMB_25 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.GE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RelOp ::= _SYMB_26 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.EQU(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RelOp ::= _SYMB_27 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.NE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
