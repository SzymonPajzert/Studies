
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package latte;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\003\000\002\004\004\000\002\005\004" +
    "\000\002\006\002\000\002\006\003\000\002\006\005\000" +
    "\002\007\005\000\002\010\002\000\002\010\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\005\000\002\011" +
    "\006\000\002\011\011\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\004\000\002\011\007\000" +
    "\002\011\011\000\002\011\007\000\002\011\012\000\002" +
    "\011\004\000\002\012\003\000\002\012\005\000\002\013" +
    "\003\000\002\013\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\004\000" +
    "\002\015\002\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\006\000\002\016\006\000\002\016\003" +
    "\000\002\016\005\000\002\017\007\000\002\017\004\000" +
    "\002\017\004\000\002\017\003\000\002\020\005\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\003" +
    "\000\002\024\005\000\002\024\003\000\002\025\002\000" +
    "\002\025\003\000\002\025\005\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\012\036\010\043\007\046\005\050\013\001" +
    "\002\000\004\002\205\001\002\000\010\013\uffe2\017\uffe2" +
    "\054\uffe2\001\002\000\006\017\016\054\015\001\002\000" +
    "\010\013\uffe3\017\uffe3\054\uffe3\001\002\000\010\013\uffe1" +
    "\017\uffe1\054\uffe1\001\002\000\004\002\000\001\002\000" +
    "\014\002\ufffe\036\010\043\007\046\005\050\013\001\002" +
    "\000\010\013\uffe0\017\uffe0\054\uffe0\001\002\000\004\002" +
    "\ufffd\001\002\000\004\004\017\001\002\000\010\013\uffdf" +
    "\017\uffdf\054\uffdf\001\002\000\014\005\ufffb\036\010\043" +
    "\007\046\005\050\013\001\002\000\006\017\016\054\204" +
    "\001\002\000\006\005\ufffa\006\202\001\002\000\004\005" +
    "\023\001\002\000\004\007\024\001\002\000\052\004\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\020\ufff7\021\ufff7\036\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\001" +
    "\002\000\014\002\uffff\036\uffff\043\uffff\046\uffff\050\uffff" +
    "\001\002\000\052\004\054\007\024\010\052\011\051\020" +
    "\047\021\046\036\010\040\056\041\053\042\041\043\007" +
    "\044\037\045\033\046\005\047\030\050\013\051\057\052" +
    "\031\053\027\054\035\001\002\000\046\005\uffda\006\uffda" +
    "\011\uffda\013\uffda\014\uffda\020\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\001\002\000\046\005\uffd9\006" +
    "\uffd9\011\uffd9\013\uffd9\014\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\001\002\000\046\005\uffd5" +
    "\006\uffd5\011\uffd5\013\uffd5\014\uffd5\020\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\001\002\000\046\005" +
    "\uffd0\006\uffd0\011\uffd0\013\uffd0\014\uffd0\020\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\001\002\000\026" +
    "\004\054\011\200\020\047\021\046\040\056\044\037\047" +
    "\030\052\031\053\027\054\062\001\002\000\046\005\uffce" +
    "\006\uffce\011\uffce\013\uffce\014\uffce\020\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\001\002\000\050\004" +
    "\063\011\uffdb\012\165\013\164\015\163\016\162\020\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\001\002" +
    "\000\046\005\uffcc\006\uffcc\011\uffcc\013\uffcc\014\uffcc\020" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\145\026\144\027\143" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\001" +
    "\002\000\012\036\010\043\007\046\005\050\013\001\002" +
    "\000\040\005\uffca\006\uffca\011\uffca\013\uffca\014\uffca\020" +
    "\140\022\uffca\023\uffca\024\137\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\001\002\000\004\004\150\001" +
    "\002\000\034\005\uffc8\006\uffc8\011\uffc8\013\uffc8\014\uffc8" +
    "\022\131\023\uffc8\030\130\031\127\032\125\033\134\034" +
    "\133\035\132\001\002\000\052\004\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\020\ufff6\021\ufff6\036\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\053\ufff6\054\ufff6\001\002\000\016\005" +
    "\uffc6\006\uffc6\011\uffc6\013\uffc6\014\uffc6\023\123\001\002" +
    "\000\006\011\122\013\070\001\002\000\024\004\054\020" +
    "\047\021\046\040\056\044\037\047\030\052\031\053\027" +
    "\054\062\001\002\000\024\004\054\020\047\021\046\040" +
    "\056\044\037\047\030\052\031\053\027\054\062\001\002" +
    "\000\006\017\016\054\110\001\002\000\056\004\ufff5\005" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\020\ufff5\021\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\001\002\000\060\002\ufff8\004\ufff8\005\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\020\ufff8\021\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\001\002\000\004\004\100\001\002\000\024\004\054\020" +
    "\047\021\046\040\056\044\037\047\030\052\031\053\027" +
    "\054\062\001\002\000\056\004\ufff4\005\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\020\ufff4\021\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\001\002" +
    "\000\046\005\uffd8\006\uffd8\011\uffd8\013\uffd8\014\uffd8\020" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\001" +
    "\002\000\004\004\060\001\002\000\024\004\054\020\047" +
    "\021\046\040\056\044\037\047\030\052\031\053\027\054" +
    "\062\001\002\000\006\005\074\013\070\001\002\000\050" +
    "\004\063\005\uffdb\006\uffdb\011\uffdb\013\uffdb\014\uffdb\020" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\001" +
    "\002\000\026\004\054\005\uffc5\020\047\021\046\040\056" +
    "\044\037\047\030\052\031\053\027\054\062\001\002\000" +
    "\010\005\uffc4\006\067\013\070\001\002\000\004\005\066" +
    "\001\002\000\046\005\uffd6\006\uffd6\011\uffd6\013\uffd6\014" +
    "\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\001\002\000\026\004\054\005\uffc5\020\047\021\046" +
    "\040\056\044\037\047\030\052\031\053\027\054\062\001" +
    "\002\000\024\004\054\020\047\021\046\040\056\044\037" +
    "\047\030\052\031\053\027\054\062\001\002\000\006\013" +
    "\070\014\072\001\002\000\046\005\uffd7\006\uffd7\011\uffd7" +
    "\013\uffd7\014\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\001\002\000\004\005\uffc3\001\002\000" +
    "\050\004\054\007\024\011\051\020\047\021\046\036\010" +
    "\040\056\041\053\042\041\043\007\044\037\045\033\046" +
    "\005\047\030\050\013\051\057\052\031\053\027\054\035" +
    "\001\002\000\056\004\uffea\005\uffea\007\uffea\010\uffea\011" +
    "\uffea\020\uffea\021\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\001\002\000\006" +
    "\005\077\013\070\001\002\000\046\005\uffd4\006\uffd4\011" +
    "\uffd4\013\uffd4\014\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\001\002\000\050\004\054\007\024" +
    "\011\051\020\047\021\046\036\010\040\056\041\053\042" +
    "\041\043\007\044\037\045\033\046\005\047\030\050\013" +
    "\051\057\052\031\053\027\054\035\001\002\000\024\004" +
    "\054\020\047\021\046\040\056\044\037\047\030\052\031" +
    "\053\027\054\062\001\002\000\006\011\103\013\070\001" +
    "\002\000\050\004\054\007\024\011\051\020\047\021\046" +
    "\036\010\040\056\041\053\042\041\043\007\044\037\045" +
    "\033\046\005\047\030\050\013\051\057\052\031\053\027" +
    "\054\035\001\002\000\004\005\105\001\002\000\050\004" +
    "\054\007\024\011\051\020\047\021\046\036\010\040\056" +
    "\041\053\042\041\043\007\044\037\045\033\046\005\047" +
    "\030\050\013\051\057\052\031\053\027\054\035\001\002" +
    "\000\056\004\uffe9\005\uffe9\007\uffe9\010\uffe9\011\uffe9\020" +
    "\uffe9\021\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\001\002\000\006\006\115" +
    "\011\uffe5\001\002\000\010\006\uffe7\011\uffe7\012\113\001" +
    "\002\000\004\011\112\001\002\000\056\004\ufff3\005\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\020\ufff3\021\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\001\002\000\024\004\054\020\047\021\046\040\056" +
    "\044\037\047\030\052\031\053\027\054\062\001\002\000" +
    "\010\006\uffe6\011\uffe6\013\070\001\002\000\004\054\110" +
    "\001\002\000\004\011\uffe4\001\002\000\046\005\uffd2\006" +
    "\uffd2\011\uffd2\013\uffd2\014\uffd2\020\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\001\002\000\004\013\070" +
    "\001\002\000\046\005\uffd1\006\uffd1\011\uffd1\013\uffd1\014" +
    "\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\001\002\000\056\004\uffe8\005\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\020\uffe8\021\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\001\002\000" +
    "\024\004\054\020\047\021\046\040\056\044\037\047\030" +
    "\052\031\053\027\054\062\001\002\000\014\005\uffc7\006" +
    "\uffc7\011\uffc7\013\070\014\uffc7\001\002\000\024\004\uffbb" +
    "\020\uffbb\021\uffbb\040\uffbb\044\uffbb\047\uffbb\052\uffbb\053" +
    "\uffbb\054\uffbb\001\002\000\024\004\054\020\047\021\046" +
    "\040\056\044\037\047\030\052\031\053\027\054\062\001" +
    "\002\000\024\004\uffbc\020\uffbc\021\uffbc\040\uffbc\044\uffbc" +
    "\047\uffbc\052\uffbc\053\uffbc\054\uffbc\001\002\000\024\004" +
    "\uffbd\020\uffbd\021\uffbd\040\uffbd\044\uffbd\047\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\001\002\000\024\004\054\020\047\021" +
    "\046\040\056\044\037\047\030\052\031\053\027\054\062" +
    "\001\002\000\024\004\uffb8\020\uffb8\021\uffb8\040\uffb8\044" +
    "\uffb8\047\uffb8\052\uffb8\053\uffb8\054\uffb8\001\002\000\024" +
    "\004\uffb9\020\uffb9\021\uffb9\040\uffb9\044\uffb9\047\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\001\002\000\024\004\uffba\020\uffba" +
    "\021\uffba\040\uffba\044\uffba\047\uffba\052\uffba\053\uffba\054" +
    "\uffba\001\002\000\016\005\uffc9\006\uffc9\011\uffc9\013\uffc9" +
    "\014\uffc9\023\123\001\002\000\040\005\uffcb\006\uffcb\011" +
    "\uffcb\013\uffcb\014\uffcb\020\140\022\uffcb\023\uffcb\024\137" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\001" +
    "\002\000\024\004\uffc2\020\uffc2\021\uffc2\040\uffc2\044\uffc2" +
    "\047\uffc2\052\uffc2\053\uffc2\054\uffc2\001\002\000\024\004" +
    "\uffc1\020\uffc1\021\uffc1\040\uffc1\044\uffc1\047\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\001\002\000\024\004\054\020\047\021" +
    "\046\040\056\044\037\047\030\052\031\053\027\054\062" +
    "\001\002\000\046\005\uffcd\006\uffcd\011\uffcd\013\uffcd\014" +
    "\uffcd\020\uffcd\022\uffcd\023\uffcd\024\uffcd\025\145\026\144" +
    "\027\143\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\001\002\000\024\004\uffbe\020\uffbe\021\uffbe\040\uffbe" +
    "\044\uffbe\047\uffbe\052\uffbe\053\uffbe\054\uffbe\001\002\000" +
    "\024\004\uffbf\020\uffbf\021\uffbf\040\uffbf\044\uffbf\047\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\001\002\000\024\004\uffc0\020" +
    "\uffc0\021\uffc0\040\uffc0\044\uffc0\047\uffc0\052\uffc0\053\uffc0" +
    "\054\uffc0\001\002\000\024\004\054\020\047\021\046\040" +
    "\056\044\037\047\030\052\031\053\027\054\062\001\002" +
    "\000\046\005\uffcf\006\uffcf\011\uffcf\013\uffcf\014\uffcf\020" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\001" +
    "\002\000\024\004\054\020\047\021\046\040\056\044\037" +
    "\047\030\052\031\053\027\054\062\001\002\000\006\005" +
    "\152\013\070\001\002\000\050\004\054\007\024\011\051" +
    "\020\047\021\046\036\010\040\056\041\053\042\041\043" +
    "\007\044\037\045\033\046\005\047\030\050\013\051\057" +
    "\052\031\053\027\054\035\001\002\000\056\004\uffec\005" +
    "\uffec\007\uffec\010\uffec\011\uffec\020\uffec\021\uffec\036\uffec" +
    "\037\154\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045" +
    "\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\001\002\000\050\004\054\007\024\011\051\020" +
    "\047\021\046\036\010\040\056\041\053\042\041\043\007" +
    "\044\037\045\033\046\005\047\030\050\013\051\057\052" +
    "\031\053\027\054\035\001\002\000\056\004\uffeb\005\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\020\uffeb\021\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb" +
    "\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\001\002\000\006\013\157\017\016\001\002\000\004" +
    "\053\160\001\002\000\004\014\161\001\002\000\046\005" +
    "\uffd3\006\uffd3\011\uffd3\013\uffd3\014\uffd3\020\uffd3\022\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000\004" +
    "\011\176\001\002\000\004\011\175\001\002\000\024\004" +
    "\054\020\047\021\046\040\056\044\037\047\030\052\031" +
    "\053\027\054\062\001\002\000\024\004\054\020\047\021" +
    "\046\040\056\044\037\047\030\052\031\053\027\054\062" +
    "\001\002\000\006\011\167\013\070\001\002\000\056\004" +
    "\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2\020\ufff2\021\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\001\002\000\006\013\070\014\171\001" +
    "\002\000\004\012\172\001\002\000\024\004\054\020\047" +
    "\021\046\040\056\044\037\047\030\052\031\053\027\054" +
    "\062\001\002\000\006\011\174\013\070\001\002\000\056" +
    "\004\ufff1\005\ufff1\007\ufff1\010\ufff1\011\ufff1\020\ufff1\021" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052" +
    "\ufff1\053\ufff1\054\ufff1\001\002\000\056\004\ufff0\005\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\020\ufff0\021\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\001\002\000\056\004\uffef\005\uffef\007\uffef\010\uffef" +
    "\011\uffef\020\uffef\021\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\001\002\000" +
    "\006\011\201\013\070\001\002\000\056\004\uffed\005\uffed" +
    "\007\uffed\010\uffed\011\uffed\020\uffed\021\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\001\002\000\056\004\uffee\005\uffee\007\uffee\010\uffee" +
    "\011\uffee\020\uffee\021\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\001\002\000" +
    "\014\005\ufffb\036\010\043\007\046\005\050\013\001\002" +
    "\000\004\005\ufff9\001\002\000\006\005\ufffc\006\ufffc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\012\002\003\003\011\004\010\014\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\011\004\013\014\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\020\006\021\014\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\024\001" +
    "\001\000\004\010\025\001\001\000\002\001\001\000\026" +
    "\007\054\011\042\014\047\016\031\017\033\020\035\021" +
    "\037\022\041\023\043\024\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\031\017\033\020\035\021\037\022\041\023\043" +
    "\024\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\145\001\001\000\004\014\155\001\001\000\004" +
    "\026\140\001\001\000\002\001\001\000\004\030\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\120\017\033\020\035\021\037\022\041\023" +
    "\043\024\117\001\001\000\020\016\116\017\033\020\035" +
    "\021\037\022\041\023\043\024\117\001\001\000\006\012" +
    "\106\013\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\031\017\033\020\035\021" +
    "\037\022\041\023\043\024\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\031\017" +
    "\033\020\035\021\037\022\041\023\043\024\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\031\017" +
    "\033\020\035\021\037\022\041\023\043\024\063\025\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\031\017\033\020\035\021\037\022\041" +
    "\023\043\024\063\025\072\001\001\000\020\016\031\017" +
    "\033\020\035\021\037\022\041\023\043\024\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\054\011\074\014\047\016\031\017\033\020\035" +
    "\021\037\022\041\023\043\024\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\054" +
    "\011\100\014\047\016\031\017\033\020\035\021\037\022" +
    "\041\023\043\024\044\001\001\000\020\016\031\017\033" +
    "\020\035\021\037\022\041\023\043\024\101\001\001\000" +
    "\002\001\001\000\026\007\054\011\103\014\047\016\031" +
    "\017\033\020\035\021\037\022\041\023\043\024\044\001" +
    "\001\000\002\001\001\000\026\007\054\011\105\014\047" +
    "\016\031\017\033\020\035\021\037\022\041\023\043\024" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\031\017\033\020\035\021\037\022\041\023\043\024\113" +
    "\001\001\000\002\001\001\000\006\012\106\013\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\031\017" +
    "\033\020\035\021\037\022\041\023\043\024\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\031\017" +
    "\033\020\035\021\135\022\041\023\043\024\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\031\017" +
    "\033\020\035\021\037\022\041\023\134\024\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\031\017\033\020\141\021" +
    "\037\022\041\023\043\024\117\001\001\000\004\027\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\031\017\146\020\035\021\037\022\041" +
    "\023\043\024\117\001\001\000\002\001\001\000\020\016" +
    "\031\017\033\020\035\021\037\022\041\023\043\024\150" +
    "\001\001\000\002\001\001\000\026\007\054\011\152\014" +
    "\047\016\031\017\033\020\035\021\037\022\041\023\043" +
    "\024\044\001\001\000\002\001\001\000\026\007\054\011" +
    "\154\014\047\016\031\017\033\020\035\021\037\022\041" +
    "\023\043\024\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\031\017" +
    "\033\020\035\021\037\022\041\023\043\024\167\001\001" +
    "\000\020\016\031\017\033\020\035\021\037\022\041\023" +
    "\043\024\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\031\017" +
    "\033\020\035\021\037\022\041\023\043\024\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\020\006\202\014\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public latte.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (latte.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		latte.Absyn.Program start_val = (latte.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListTopDef 
            {
              latte.Absyn.Program RESULT =null;
		latte.Absyn.ListTopDef p_1 = (latte.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ProgramCons(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TopDef ::= Type _IDENT_ _SYMB_0 ListArg _SYMB_1 Block 
            {
              latte.Absyn.TopDef RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.ListArg p_4 = (latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Block p_6 = (latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.FnDef(p_1,p_2,p_4,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TopDef",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListTopDef ::= TopDef 
            {
              latte.Absyn.ListTopDef RESULT =null;
		latte.Absyn.TopDef p_1 = (latte.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListTopDef(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTopDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListTopDef ::= TopDef ListTopDef 
            {
              latte.Absyn.ListTopDef RESULT =null;
		latte.Absyn.TopDef p_1 = (latte.Absyn.TopDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.ListTopDef p_2 = (latte.Absyn.ListTopDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; p_2.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListTopDef",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Arg ::= Type _IDENT_ 
            {
              latte.Absyn.Arg RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ArgCons(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Arg",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListArg ::= 
            {
              latte.Absyn.ListArg RESULT =null;
		 RESULT = new latte.Absyn.ListArg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListArg ::= Arg 
            {
              latte.Absyn.ListArg RESULT =null;
		latte.Absyn.Arg p_1 = (latte.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListArg(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListArg ::= Arg _SYMB_2 ListArg 
            {
              latte.Absyn.ListArg RESULT =null;
		latte.Absyn.Arg p_1 = (latte.Absyn.Arg)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListArg p_3 = (latte.Absyn.ListArg)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListArg",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Block ::= _SYMB_3 ListStmt _SYMB_4 
            {
              latte.Absyn.Block RESULT =null;
		latte.Absyn.ListStmt p_2 = (latte.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.BlockCons(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListStmt ::= 
            {
              latte.Absyn.ListStmt RESULT =null;
		 RESULT = new latte.Absyn.ListStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListStmt ::= ListStmt Stmt 
            {
              latte.Absyn.ListStmt RESULT =null;
		latte.Absyn.ListStmt p_1 = (latte.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.Stmt p_2 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListStmt",6, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Stmt ::= _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		 RESULT = new latte.Absyn.Empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Stmt ::= Block 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Block p_1 = (latte.Absyn.Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.BStmt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Stmt ::= Type ListItem _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListItem p_2 = (latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.Decl(p_1,p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Stmt ::= _IDENT_ _SYMB_6 Expr _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.Ass(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Stmt ::= _IDENT_ _SYMB_7 Expr _SYMB_8 _SYMB_6 Expr _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.Expr p_6 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.AssArr(p_1,p_3,p_6); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Stmt ::= _IDENT_ _SYMB_9 _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new latte.Absyn.Incr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Stmt ::= _IDENT_ _SYMB_10 _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new latte.Absyn.Decr(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Stmt ::= _SYMB_33 Expr _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_2 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.Ret(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Stmt ::= _SYMB_33 _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		 RESULT = new latte.Absyn.VRet(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= _SYMB_30 _SYMB_0 Expr _SYMB_1 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_5 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Cond(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= _SYMB_30 _SYMB_0 Expr _SYMB_1 Stmt _SYMB_27 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.Stmt p_5 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_7 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.CondElse(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= _SYMB_37 _SYMB_0 Expr _SYMB_1 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_5 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.While(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= _SYMB_29 _SYMB_0 Stmt Expr _SYMB_5 Stmt _SYMB_1 Stmt 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Stmt p_3 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		latte.Absyn.Expr p_4 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		latte.Absyn.Stmt p_6 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Stmt p_8 = (latte.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.For(p_3,p_4,p_6,p_8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= Expr _SYMB_5 
            {
              latte.Absyn.Stmt RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.SExp(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",7, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Item ::= _IDENT_ 
            {
              latte.Absyn.Item RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.NoInit(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Item",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Item ::= _IDENT_ _SYMB_6 Expr 
            {
              latte.Absyn.Item RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Init(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Item",8, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListItem ::= Item 
            {
              latte.Absyn.ListItem RESULT =null;
		latte.Absyn.Item p_1 = (latte.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListItem(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListItem",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListItem ::= Item _SYMB_2 ListItem 
            {
              latte.Absyn.ListItem RESULT =null;
		latte.Absyn.Item p_1 = (latte.Absyn.Item)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListItem p_3 = (latte.Absyn.ListItem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListItem",9, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Type ::= _SYMB_31 
            {
              latte.Absyn.Type RESULT =null;
		 RESULT = new latte.Absyn.Int(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= _SYMB_34 
            {
              latte.Absyn.Type RESULT =null;
		 RESULT = new latte.Absyn.Str(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= _SYMB_26 
            {
              latte.Absyn.Type RESULT =null;
		 RESULT = new latte.Absyn.Bool(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= _SYMB_36 
            {
              latte.Absyn.Type RESULT =null;
		 RESULT = new latte.Absyn.Void(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Type ::= Type _SYMB_11 
            {
              latte.Absyn.Type RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.ArrayT(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListType ::= 
            {
              latte.Absyn.ListType RESULT =null;
		 RESULT = new latte.Absyn.ListType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListType ::= Type 
            {
              latte.Absyn.ListType RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListType(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListType ::= Type _SYMB_2 ListType 
            {
              latte.Absyn.ListType RESULT =null;
		latte.Absyn.Type p_1 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListType p_3 = (latte.Absyn.ListType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListType",11, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr6 ::= _IDENT_ 
            {
              latte.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr6 ::= _INTEGER_ 
            {
              latte.Absyn.Expr RESULT =null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ELitInt(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr6 ::= _SYMB_35 
            {
              latte.Absyn.Expr RESULT =null;
		 RESULT = new latte.Absyn.ELitTrue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr6 ::= _SYMB_28 
            {
              latte.Absyn.Expr RESULT =null;
		 RESULT = new latte.Absyn.ELitFalse(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr6 ::= Expr _SYMB_7 Expr _SYMB_8 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.EArrAcc(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr6 ::= _IDENT_ _SYMB_0 ListExpr _SYMB_1 
            {
              latte.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		latte.Absyn.ListExpr p_3 = (latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.EApp(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr6 ::= _STRING_ 
            {
              latte.Absyn.Expr RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EString(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr6 ::= _SYMB_0 Expr _SYMB_1 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_2 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr6",12, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr5 ::= _SYMB_32 Type _SYMB_7 _INTEGER_ _SYMB_8 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Type p_2 = (latte.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Integer p_4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new latte.Absyn.EArrayCons(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr5 ::= _SYMB_12 Expr6 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_2 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Neg(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr5 ::= _SYMB_13 Expr6 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_2 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.Not(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr5 ::= Expr6 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr5",13, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr4 ::= Expr4 MulOp Expr5 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.MulOp p_2 = (latte.Absyn.MulOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EMul(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr4 ::= Expr5 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr4",14, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr3 ::= Expr3 AddOp Expr4 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.AddOp p_2 = (latte.Absyn.AddOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EAdd(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr3 ::= Expr4 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr3",15, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr2 ::= Expr2 RelOp Expr3 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.RelOp p_2 = (latte.Absyn.RelOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ERel(p_1,p_2,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr2 ::= Expr3 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr2",16, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr1 ::= Expr2 _SYMB_14 Expr1 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EAnd(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr1 ::= Expr2 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr1",17, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr1 _SYMB_15 Expr 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.Expr p_3 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.EOr(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr1 
            {
              latte.Absyn.Expr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",18, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListExpr ::= 
            {
              latte.Absyn.ListExpr RESULT =null;
		 RESULT = new latte.Absyn.ListExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListExpr ::= Expr 
            {
              latte.Absyn.ListExpr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new latte.Absyn.ListExpr(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListExpr ::= Expr _SYMB_2 ListExpr 
            {
              latte.Absyn.ListExpr RESULT =null;
		latte.Absyn.Expr p_1 = (latte.Absyn.Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		latte.Absyn.ListExpr p_3 = (latte.Absyn.ListExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",19, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AddOp ::= _SYMB_16 
            {
              latte.Absyn.AddOp RESULT =null;
		 RESULT = new latte.Absyn.Plus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOp",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AddOp ::= _SYMB_12 
            {
              latte.Absyn.AddOp RESULT =null;
		 RESULT = new latte.Absyn.Minus(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AddOp",20, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MulOp ::= _SYMB_17 
            {
              latte.Absyn.MulOp RESULT =null;
		 RESULT = new latte.Absyn.Times(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MulOp ::= _SYMB_18 
            {
              latte.Absyn.MulOp RESULT =null;
		 RESULT = new latte.Absyn.Div(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MulOp ::= _SYMB_19 
            {
              latte.Absyn.MulOp RESULT =null;
		 RESULT = new latte.Absyn.Mod(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MulOp",21, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RelOp ::= _SYMB_20 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.LTH(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RelOp ::= _SYMB_21 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.LE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // RelOp ::= _SYMB_22 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.GTH(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // RelOp ::= _SYMB_23 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.GE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RelOp ::= _SYMB_24 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.EQU(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",22, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RelOp ::= _SYMB_25 
            {
              latte.Absyn.RelOp RESULT =null;
		 RESULT = new latte.Absyn.NE(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",22, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
